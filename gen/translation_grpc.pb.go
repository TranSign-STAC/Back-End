// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transign

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TextToSignLangClient is the client API for TextToSignLang service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextToSignLangClient interface {
	Translate(ctx context.Context, in *TextToSignLangRequest, opts ...grpc.CallOption) (*TextToSignLangResponse, error)
}

type textToSignLangClient struct {
	cc grpc.ClientConnInterface
}

func NewTextToSignLangClient(cc grpc.ClientConnInterface) TextToSignLangClient {
	return &textToSignLangClient{cc}
}

func (c *textToSignLangClient) Translate(ctx context.Context, in *TextToSignLangRequest, opts ...grpc.CallOption) (*TextToSignLangResponse, error) {
	out := new(TextToSignLangResponse)
	err := c.cc.Invoke(ctx, "/transign.TextToSignLang/Translate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextToSignLangServer is the server API for TextToSignLang service.
// All implementations must embed UnimplementedTextToSignLangServer
// for forward compatibility
type TextToSignLangServer interface {
	Translate(context.Context, *TextToSignLangRequest) (*TextToSignLangResponse, error)
	mustEmbedUnimplementedTextToSignLangServer()
}

// UnimplementedTextToSignLangServer must be embedded to have forward compatible implementations.
type UnimplementedTextToSignLangServer struct {
}

func (UnimplementedTextToSignLangServer) Translate(context.Context, *TextToSignLangRequest) (*TextToSignLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Translate not implemented")
}
func (UnimplementedTextToSignLangServer) mustEmbedUnimplementedTextToSignLangServer() {}

// UnsafeTextToSignLangServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextToSignLangServer will
// result in compilation errors.
type UnsafeTextToSignLangServer interface {
	mustEmbedUnimplementedTextToSignLangServer()
}

func RegisterTextToSignLangServer(s grpc.ServiceRegistrar, srv TextToSignLangServer) {
	s.RegisterService(&_TextToSignLang_serviceDesc, srv)
}

func _TextToSignLang_Translate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextToSignLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextToSignLangServer).Translate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transign.TextToSignLang/Translate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextToSignLangServer).Translate(ctx, req.(*TextToSignLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TextToSignLang_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transign.TextToSignLang",
	HandlerType: (*TextToSignLangServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Translate",
			Handler:    _TextToSignLang_Translate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "translation.proto",
}

// TranslationHistoryClient is the client API for TranslationHistory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranslationHistoryClient interface {
	GetHistory(ctx context.Context, in *UUIDMessage, opts ...grpc.CallOption) (*TranslationHistoryResponse, error)
	RemoveHistory(ctx context.Context, in *UUIDMessage, opts ...grpc.CallOption) (*TranslationHistoryResponse, error)
}

type translationHistoryClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslationHistoryClient(cc grpc.ClientConnInterface) TranslationHistoryClient {
	return &translationHistoryClient{cc}
}

func (c *translationHistoryClient) GetHistory(ctx context.Context, in *UUIDMessage, opts ...grpc.CallOption) (*TranslationHistoryResponse, error) {
	out := new(TranslationHistoryResponse)
	err := c.cc.Invoke(ctx, "/transign.TranslationHistory/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationHistoryClient) RemoveHistory(ctx context.Context, in *UUIDMessage, opts ...grpc.CallOption) (*TranslationHistoryResponse, error) {
	out := new(TranslationHistoryResponse)
	err := c.cc.Invoke(ctx, "/transign.TranslationHistory/RemoveHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranslationHistoryServer is the server API for TranslationHistory service.
// All implementations must embed UnimplementedTranslationHistoryServer
// for forward compatibility
type TranslationHistoryServer interface {
	GetHistory(context.Context, *UUIDMessage) (*TranslationHistoryResponse, error)
	RemoveHistory(context.Context, *UUIDMessage) (*TranslationHistoryResponse, error)
	mustEmbedUnimplementedTranslationHistoryServer()
}

// UnimplementedTranslationHistoryServer must be embedded to have forward compatible implementations.
type UnimplementedTranslationHistoryServer struct {
}

func (UnimplementedTranslationHistoryServer) GetHistory(context.Context, *UUIDMessage) (*TranslationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedTranslationHistoryServer) RemoveHistory(context.Context, *UUIDMessage) (*TranslationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHistory not implemented")
}
func (UnimplementedTranslationHistoryServer) mustEmbedUnimplementedTranslationHistoryServer() {}

// UnsafeTranslationHistoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranslationHistoryServer will
// result in compilation errors.
type UnsafeTranslationHistoryServer interface {
	mustEmbedUnimplementedTranslationHistoryServer()
}

func RegisterTranslationHistoryServer(s grpc.ServiceRegistrar, srv TranslationHistoryServer) {
	s.RegisterService(&_TranslationHistory_serviceDesc, srv)
}

func _TranslationHistory_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationHistoryServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transign.TranslationHistory/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationHistoryServer).GetHistory(ctx, req.(*UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslationHistory_RemoveHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationHistoryServer).RemoveHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transign.TranslationHistory/RemoveHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationHistoryServer).RemoveHistory(ctx, req.(*UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _TranslationHistory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transign.TranslationHistory",
	HandlerType: (*TranslationHistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHistory",
			Handler:    _TranslationHistory_GetHistory_Handler,
		},
		{
			MethodName: "RemoveHistory",
			Handler:    _TranslationHistory_RemoveHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "translation.proto",
}

// FavoriteTranslationClient is the client API for FavoriteTranslation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoriteTranslationClient interface {
	GetFavorite(ctx context.Context, in *UUIDMessage, opts ...grpc.CallOption) (*GetFavoriteTranslationResponse, error)
	ToggleFavorite(ctx context.Context, in *ToggleFavoriteTranslationRequest, opts ...grpc.CallOption) (*GetFavoriteTranslationResponse, error)
}

type favoriteTranslationClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoriteTranslationClient(cc grpc.ClientConnInterface) FavoriteTranslationClient {
	return &favoriteTranslationClient{cc}
}

func (c *favoriteTranslationClient) GetFavorite(ctx context.Context, in *UUIDMessage, opts ...grpc.CallOption) (*GetFavoriteTranslationResponse, error) {
	out := new(GetFavoriteTranslationResponse)
	err := c.cc.Invoke(ctx, "/transign.FavoriteTranslation/GetFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteTranslationClient) ToggleFavorite(ctx context.Context, in *ToggleFavoriteTranslationRequest, opts ...grpc.CallOption) (*GetFavoriteTranslationResponse, error) {
	out := new(GetFavoriteTranslationResponse)
	err := c.cc.Invoke(ctx, "/transign.FavoriteTranslation/ToggleFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoriteTranslationServer is the server API for FavoriteTranslation service.
// All implementations must embed UnimplementedFavoriteTranslationServer
// for forward compatibility
type FavoriteTranslationServer interface {
	GetFavorite(context.Context, *UUIDMessage) (*GetFavoriteTranslationResponse, error)
	ToggleFavorite(context.Context, *ToggleFavoriteTranslationRequest) (*GetFavoriteTranslationResponse, error)
	mustEmbedUnimplementedFavoriteTranslationServer()
}

// UnimplementedFavoriteTranslationServer must be embedded to have forward compatible implementations.
type UnimplementedFavoriteTranslationServer struct {
}

func (UnimplementedFavoriteTranslationServer) GetFavorite(context.Context, *UUIDMessage) (*GetFavoriteTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorite not implemented")
}
func (UnimplementedFavoriteTranslationServer) ToggleFavorite(context.Context, *ToggleFavoriteTranslationRequest) (*GetFavoriteTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleFavorite not implemented")
}
func (UnimplementedFavoriteTranslationServer) mustEmbedUnimplementedFavoriteTranslationServer() {}

// UnsafeFavoriteTranslationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoriteTranslationServer will
// result in compilation errors.
type UnsafeFavoriteTranslationServer interface {
	mustEmbedUnimplementedFavoriteTranslationServer()
}

func RegisterFavoriteTranslationServer(s grpc.ServiceRegistrar, srv FavoriteTranslationServer) {
	s.RegisterService(&_FavoriteTranslation_serviceDesc, srv)
}

func _FavoriteTranslation_GetFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteTranslationServer).GetFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transign.FavoriteTranslation/GetFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteTranslationServer).GetFavorite(ctx, req.(*UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteTranslation_ToggleFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleFavoriteTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteTranslationServer).ToggleFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transign.FavoriteTranslation/ToggleFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteTranslationServer).ToggleFavorite(ctx, req.(*ToggleFavoriteTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FavoriteTranslation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transign.FavoriteTranslation",
	HandlerType: (*FavoriteTranslationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFavorite",
			Handler:    _FavoriteTranslation_GetFavorite_Handler,
		},
		{
			MethodName: "ToggleFavorite",
			Handler:    _FavoriteTranslation_ToggleFavorite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "translation.proto",
}
